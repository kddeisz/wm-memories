# frozen_string_literal: true

require 'parlour'

namespace :rbi do # rubocop:disable Metrics/BlockLength
  desc 'generate fixture rbi files'
  task fixtures: :environment do # rubocop:disable Metrics/BlockLength
    require 'active_record/fixtures'

    fixtures_dir = ActiveRecord::Tasks::DatabaseTasks.fixtures_path
    fixture_sets =
      ActiveRecord::FixtureSet.create_fixtures(
        fixtures_dir,
        Dir["#{fixtures_dir}/**/*.yml"].map do |filepath|
          filepath[(fixtures_dir.size + 1)..-5]
        end
      )

    parlour = Parlour::RbiGenerator.new
    parlour.root.add_comments(
      [
        'This is an autogenerated file for Rails test fixtures.',
        'Please rerun bundle exec rake rbi:fixtures to regenerate.'
      ]
    )

    parlour.root.create_class('ActiveSupport::TestCase') do |rbi|
      fixture_sets.each do |fixture_set|
        rbi.create_method(
          fixture_set.name,
          parameters: [
            Parlour::RbiGenerator::Parameter.new('fixture_name', type: 'Symbol')
          ],
          return_type: fixture_set.model_class.name,
          class_method: false
        )
      end
    end

    File.write(Rails.root.join('sorbet', 'fixtures.rbi'), parlour.rbi)
  end

  desc 'generate migration rbi files'
  task migrations: :environment do
    parlour = Parlour::RbiGenerator.new
    parlour.root.add_comments(
      [
        'This is an autogenerated file for Rails migrations.',
        'Please rerun bundle exec rake rbi:migrations to regenerate.'
      ]
    )

    schema_statements = ActiveRecord::ConnectionAdapters::SchemaStatements

    parlour.root.create_class('ActiveRecord::Migration') do |rbi|
      schema_statements.instance_methods.each do |method_name|
        method = schema_statements.instance_method(method_name)
        parameters = SorbetRails::SorbetUtils.parameters_from_method_def(method)

        rbi.create_method(
          method_name.to_s,
          parameters: parameters,
          class_method: false
        )
      end
    end

    File.write(Rails.root.join('sorbet', 'migrations.rbi'), parlour.rbi)
  end
end
